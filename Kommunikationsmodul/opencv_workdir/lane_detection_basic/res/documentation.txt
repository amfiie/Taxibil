https://www.geeksforgeeks.org/opencv-real-time-road-lane-detection/ 

EDGE DETECTION:

1. (DONE) Read and Decode video file into frames:
     We will capture the video using VideoCapture object 
     and after the capturing has been initialized every video 
     frame is decoded (i.e. converting into a sequence of images).

2. (DONE) Grayscale Conversion of image:
    The video frames are in RGB format, RGB is converted to grayscale 
    because processing a single channel image is faster than 
    processing a three-channel colored image.

3. (DONE) Reduce noise by applying filter:
    Noise can create false edges, therefore before going further, 
    itâ€™s imperative to perform image smoothening. 
    Gaussian filter is used to perform this process.
    Gaussian blur algorithm is explained in following article:
    https://www.opencv-srf.com/2018/03/gaussian-blur.html 

4. (DONE) Detecting edges:
    It computes gradient in all directions of our blurred image 
    and traces the edges with large changes in intensity. 
    For more explanation please go through this article:
    https://www.geeksforgeeks.org/real-time-edge-detection-using-opencv-python/
    Other links used:
    https://stackoverflow.com/questions/55891733/opencv-lane-detetion-both-yellow-and-white-lanes 
    
    trackbars for color picker source: https://www.youtube.com/watch?v=m4TqY2h6BVc

Hough Line Transform: 
The Hough Line Transform is a transform used to detect straight lines. 
The Probabilistic Hough Line Transform is used here, 
which gives output as the extremes of the detected lines.

Warping - Bird view.

5. Mask the canny image:
6. Find coordinates of road lanes:
7. Fit the coordinates into the canny image:
8. Edge detection done: